---
AWSTemplateFormatVersion: 2010-09-09
Description: Provides nesting for required stacks to deploy a full sample web application
  with reverse proxy, ELBs, IAM, and other resources 
Metadata:
  Stack:
    Value: 3
  VersionDate:
    Value: 20160510
  Identifier:
    Value: template-application
  Input:
    Description: VPC, SubnetIDs, S3 bucket names, CIDR blocks, KeyNames, AMIs, DB
      name and password
  Output:
    Description: Outputs ID of all deployed resources
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Availability Zone selection
      Parameters:
      - AvailabilityZoneA
      - AvailabilityZoneB
    - Label:
        default: Network (existing VPC config)
      Parameters:
      - pProductionCIDR
      - pManagementCIDR
      - pProductionVPC
      - pDMZSubnetA
      - pDMZSubnetB
      - pAppPrivateSubnetA
      - pAppPrivateSubnetB
    - Label:
        default: Application Configuration
      Parameters:
      - pWebInstanceType
      - pWebServerAMI
      - pAppInstanceType
      - pAppAmi
      - pEC2KeyPair
      - pEnvironment
      - pSupportsGlacier
    - Label:
        default: Logging configuration
      Parameters:
      - CentralLogBucket
      - WAFlogging
    - Label:
        default: Amazon Elasticsearch configuration
      Parameters:
      - ESClusterARN
    - Label:
        default: Database Configuration
      Parameters:
      - pDBHost
      - pDBName
      - pDBUser
      - pDBPassword
    - Label:
        default: AWS Quick Start Configuration
      Parameters:
      - QSS3BucketName
      - QSS3BucketRegion
      - QSS3KeyPrefix
    ParameterLabels:
      AvailabilityZoneA:
        default: ID of first availability zone
      AvailabilityZoneB:
        default: ID of second availability zone
      pProductionCIDR:
        default: CIDR block of production VPC
      pManagementCIDR:
        default: CIDR block of management VPC
      pProductionVPC:
        default: Production VPC ID
      pDMZSubnetA:
        default: First production DMZ subnet
      pDMZSubnetB:
        default: Second production DMZ subnet
      pAppPrivateSubnetA:
        default: First production application subnet
      pAppPrivateSubnetB:
        default: Second production application subnet
      pWebInstanceType:
        default: Web instance type
      pWebServerAMI:
        default: Web server SSM AMI parameter
      pAppInstanceType:
        default: Application instance type
      pAppAmi:
        default: Application server SSM AMI parameter
      pEC2KeyPair:
        default: EC2 key pair
      pEnvironment:
        default: Environment type
      pSupportsGlacier:
        default: Supports glacier
      CentralLogBucket:
        default: Central S3 logging bucket
      WAFlogging:
        default: WAF logging
      ESClusterARN:
        default: ElasticSearch cluster ARN
      pDBHost:
        default: Database host
      pDBName:
        default: Database name
      pDBUser:
        default: Database user
      pDBPassword:
        default: Database password
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3BucketRegion:
        default: Quick Start S3 bucket Region
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
Parameters:
  WAFlogging:
    Type: String
    Description: The storage location for AWS WAF logs. Choose Amazon Elasticsearch_S3 to have AWS WAF logs streamed to Amazon ES (current Region) and your central logging bucket.
    AllowedValues:
      - Amazon Elasticsearch_S3
      - Amazon S3 Only
    Default: Amazon S3 Only
  CentralLogBucket:
    Type: String
    Description: The S3 bucket to send AWS WAF logs to. This bucket should already exist and can be same bucket from the centralized logging template.
    Default: ''
  ESClusterARN:
    Type: String
    Description: (If Amazon Elasticsearch_S3 is chosen for the WAFlogging parameter) The Amazon Resource Name (ARN) of the Amazon ES domain that Kinesis Data Firehose delivers data to. Cluster must be in same account and Region.
    Default: ''
  pEC2KeyPair:
    Description: Key Name for Instance
    Type: AWS::EC2::KeyPair::KeyName
  pProductionCIDR:
    Description: Production VPC CIDR
    Type: String
    Default: 10.100.0.0/16
  pManagementCIDR:
    Description: Management VPC CIDR
    Type: String
    Default: 10.10.0.0/16
  pProductionVPC:
    Description: Production VPC
    Type: AWS::EC2::VPC::Id
  pDMZSubnetA:
    Description: DMZ Subnet A
    Type: AWS::EC2::Subnet::Id
  pDMZSubnetB:
    Description: DMZ Subnet B
    Type: AWS::EC2::Subnet::Id
  pAppPrivateSubnetA:
    Description: WebApp Subnet A
    Type: AWS::EC2::Subnet::Id
  pAppPrivateSubnetB:
    Description: WebApp Subnet A
    Type: AWS::EC2::Subnet::Id
  pWebInstanceType:
    Description: Instance type for the webservers
    Type: String
    Default: m4.large
  pAppInstanceType:
    Description: Instance type for the app webservers
    Type: String
    Default: m4.large
  AvailabilityZoneA:
    Description: rDBPrivateSubnetB
    Type: AWS::EC2::AvailabilityZone::Name
  AvailabilityZoneB:
    Description: rDBPrivateSubnetB
    Type: AWS::EC2::AvailabilityZone::Name
  pWebServerAMI:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  pAppAmi:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  pDBHost:
    Description: Amazon RDS MySQL endpoint
    Type: String
  pDBName:
    Description: Name of RDS Database
    Type: String
    Default: examplewordpress
  pDBUser:
    Description: Username of DB Instance
    Type: String
    Default: admin
  pDBPassword:
    Description: Password of DB Instance
    NoEcho: true
    Type: String
  pEnvironment:
    Description: Environment type (development, test, or production)
    Type: String
    Default: development
  pSupportsGlacier:
    Description: Determines whether this region supports Glacier (passed in from main
      template)
    Type: String
    Default: 'true'
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, periods (.), and hyphens (-). It cannot start or
      end with a hyphen (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-compliance-nesa/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
Mappings:
  elbMap:
    ap-northeast-1:
      ELB: '582318560864'
    ap-northeast-2:
      ELB: '600734575887'
    ap-south-1:
      ELB: '718504428378'
    ap-southeast-1:
      ELB: '114774131450'
    ap-southeast-2:
      ELB: '783225319266'
    ca-central-1:
      ELB: '985666609251'
    eu-central-1:
      ELB: '054676820928'
    eu-west-1:
      ELB: '156460612806'
    eu-west-2:
      ELB: '652711504416'
    sa-east-1:
      ELB: '507241528517'
    us-east-1:
      ELB: '127311923021'
    us-east-2:
      ELB: '033677994240'
    us-gov-west-1:
      ELB: '048591011584'
    us-west-1:
      ELB: '027434742980'
    us-west-2:
      ELB: '797873946194'
Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  SupportsGlacier:
    !Equals
    - !Ref pSupportsGlacier
    - 'true'
Resources:
  rS3ELBAccessLogs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
  rS3AccessLogsPolicy:
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    Properties:
      Bucket: !Ref rS3ELBAccessLogs
      PolicyDocument:
        Version: 2008-10-17
        Statement:
        - Sid: ELBAccessLogs20130930
          Effect: Allow
          Resource: !Sub arn:${AWS::Partition}:s3:::${rS3ELBAccessLogs}/Logs/AWSLogs/${AWS::AccountId}/*
          Principal:
            AWS:
              !FindInMap
              - elbMap
              - !Ref AWS::Region
              - ELB
          Action:
          - s3:PutObject
  rSecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Reverse Proxy in DMZ
      VpcId: !Ref pProductionVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: sg-reverse-proxy-dmz
      - Key: Environment
        Value: !Ref pEnvironment
  rSecurityGroupWebInstance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Reverse Proxy Instances in DMZ
      VpcId: !Ref pProductionVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref pProductionCIDR
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref pProductionCIDR
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref pManagementCIDR
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 123
        ToPort: 123
        CidrIp: !Ref pProductionCIDR
      Tags:
      - Key: Name
        Value: sg-reverse-proxy-dmz-instances
      - Key: Environment
        Value: !Ref pEnvironment
  rSecurityGroupApp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Appservers ELB
      VpcId: !Ref pProductionVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref pProductionCIDR
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: sg-app-server-elb
      - Key: Environment
        Value: !Ref pEnvironment
  rSecurityGroupAppInstance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Appserver Instances
      VpcId: !Ref pProductionVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref pProductionCIDR
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref pProductionCIDR
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref pManagementCIDR
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 123
        ToPort: 123
        CidrIp: !Ref pProductionCIDR
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: !Ref pProductionCIDR
      Tags:
      - Key: Name
        Value: sg-app-server-elb-instances
      - Key: Environment
        Value: !Ref pEnvironment
  rSecurityGroupRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Port 3306 database for access
      VpcId: !Ref pProductionVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref rSecurityGroupAppInstance
      Tags:
      - Key: Name
        Value: sg-database-access
      - Key: Environment
        Value: !Ref pEnvironment
  rWebContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
        - Id: Transition90daysRetain7yrs
          Status: Enabled
          ExpirationInDays: 2555
          Transition:
            TransitionInDays: 90
            StorageClass:
              !If
              - SupportsGlacier
              - GLACIER
              - STANDARD_IA
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Delete
  rWebContentS3Policy:
    Type: AWS::S3::BucketPolicy
    DependsOn: rWebContentBucket
    Properties:
      Bucket: !Ref rWebContentBucket
      PolicyDocument:
        Statement:
        - Sid: EnforceSecureTransport
          Action: s3:*
          Effect: Deny
          Principal: '*'
          Resource: !Sub arn:${AWS::Partition}:s3:::${rWebContentBucket}
          Condition:
            Bool:
              aws:SecureTransport: 'false'
        - Sid: EnforceEncryptionOnPut
          Effect: Deny
          Principal: '*'
          Action: s3:PutObject
          Resource: !Sub arn:${AWS::Partition}:s3:::${rWebContentBucket}/*
          Condition:
            StringNotEquals:
              s3:x-amz-server-side-encryption: AES256
  rELBApp:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn:
    - rS3ELBAccessLogs
    - rSecurityGroupApp
    - rS3AccessLogsPolicy
    Properties:
      Subnets:
      - !Ref pAppPrivateSubnetA
      - !Ref pAppPrivateSubnetB
      HealthCheck:
        HealthyThreshold: "2"
        Interval: "15"
        Target: TCP:443
        Timeout: "5"
        UnhealthyThreshold: "3"
      AccessLoggingPolicy:
        S3BucketName: !Ref rS3ELBAccessLogs
        S3BucketPrefix: Logs
        Enabled: true
        EmitInterval: 60
      SecurityGroups:
      - !Ref rSecurityGroupApp
      Listeners:
      - InstancePort: "80"
        LoadBalancerPort: "80"
        Protocol: TCP
        InstanceProtocol: TCP
      - InstancePort: "443"
        LoadBalancerPort: "443"
        Protocol: TCP
        InstanceProtocol: TCP
      Scheme: internal
      Tags:
      - Key: Name
        Value: ProxyELB
      - Key: Environment
        Value: !Ref pEnvironment
  rELBWeb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    DependsOn:
    - rS3ELBAccessLogs
    - rSecurityGroupWeb
    - rS3AccessLogsPolicy
    Properties:
      Subnets:
      - !Ref pDMZSubnetA
      - !Ref pDMZSubnetB
      HealthCheck:
        HealthyThreshold: "2"
        Interval: "30"
        Target: TCP:443
        Timeout: "5"
        UnhealthyThreshold: "5"
      AccessLoggingPolicy:
        S3BucketName: !Ref rS3ELBAccessLogs
        S3BucketPrefix: Logs
        Enabled: true
        EmitInterval: 60
      SecurityGroups:
      - !Ref rSecurityGroupWeb
      Listeners:
      - InstancePort: "80"
        LoadBalancerPort: "80"
        Protocol: TCP
        InstanceProtocol: TCP
      - InstancePort: "443"
        LoadBalancerPort: "443"
        Protocol: TCP
        InstanceProtocol: TCP
      Tags:
      - Key: Name
        Value: Proxy ELB
      - Key: Environment
        Value: !Ref pEnvironment
  rS3AssetsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
  rPreProcInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: PreProcPermissions
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: UploadServerCertificate
            Effect: Allow
            Action:
            - s3:PutObject
            Resource: !Sub arn:${AWS::Partition}:s3:::${rS3AssetsBucket}/*
          - Sid: SelfDestruct
            Effect: Allow
            Action:
            - ec2:TerminateInstances
            Resource:
            - '*'
  rPreProcInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref rPreProcInstanceRole
  rPreProcInstance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref pEC2KeyPair
      ImageId: !Ref pWebServerAMI
      InstanceType: !Ref pAppInstanceType
      IamInstanceProfile: !Ref rPreProcInstanceProfile
      SubnetId: !Ref pAppPrivateSubnetA
      SecurityGroupIds:
      - !Ref rSecurityGroupAppInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          echo Force S3 to use Sigv4
          aws configure set default.s3.signature_version s3v4

          echo Configure the region, necessary especially for GovCloud
          aws configure set region ${AWS::Region}

          echo Generating private certificate...
          sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/common.key -out /tmp/common.crt -subj "/C=US/ST=Washington/L=Seattle/O=NonProductionTestCert/CN=NonProductionTestCert"

          echo Uploading key to assets bucket...
          aws s3api put-object --bucket ${rS3AssetsBucket} --key ssl/common.key --body /tmp/common.key

          echo Uploading cert to assets bucket...
          aws s3api put-object --bucket ${rS3AssetsBucket} --key ssl/common.crt --body /tmp/common.crt

          echo Signal for success
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource rPreProcInstance --region ${AWS::Region}

          echo Sleeping for 2 minutes to allow CloudFormation to catch up
          sleep 120

          echo Self-destruct!
          aws ec2 terminate-instances --instance-id $(curl -s http://169.254.169.254/latest/meta-data/instance-id) --region ${AWS::Region}
      Tags:
      - Key: Name
        Value: PreProcessor
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
  rWebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: S3Assets
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: GetServerCertificate
            Effect: Allow
            Action:
            - s3:Get*
            - s3:List*
            - s3:Head*
            Resource:
            - !Sub arn:${AWS::Partition}:s3:::${rS3AssetsBucket}/*
            - !Sub arn:${AWS::Partition}:s3:::${rS3AssetsBucket}
          - Sid: DescribeVolumes
            Effect: Allow
            Action:
            - ec2:DescribeVolumes
            Resource: '*'
      - PolicyName: aws-quick-start-s3-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
              - s3:GetObject
            Resource: !Sub
              - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
              - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
            Effect: Allow
  rWebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref rWebInstanceRole
  rAutoScalingConfigWeb:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
    - rELBApp
    - rAutoScalingGroupApp
    - rPreProcInstance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              #nginx: []
              #java-1.6.0-openjdk-devel: []
              git: []
          files:
            /etc/nginx/snippets/self-signed.conf:
              content: |
                ssl_certificate /etc/ssl/certs/common.crt;
                ssl_certificate_key /etc/ssl/private/common.key;
            /tmp/nginx/default.conf:
              content: !Sub |
                server {
                    listen       80 default_server;
                    listen       [::]:80 default_server;
                    charset utf-8;
                    location / {
                        resolver xxxxx;
                        return 301 https://$host$request_uri;
                    }
                }
                server {
                    listen 443 ssl http2 default_server;
                    listen [::]:443 ssl http2 default_server;
                    location / {
                        resolver xxxxx;
                        set $elb 'https://${rELBApp.DNSName}';
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header Host $http_host;
                        proxy_redirect off;
                        proxy_pass $elb;
                    }
                    include snippets/self-signed.conf;
                }
              mode: '000755'
              owner: root
              group: root
          commands:
            00-enable_ngnix:
              command: amazon-linux-extras install nginx1
            01-enable_ngnix:
              command: amazon-linux-extras install java-openjdk11
            02-nginx-setup:
              command: |
                #!/bin/bash
                ## Nginx setup
                sleep 5
                echo 'Replace resolver placeholder with /etc/resolv.conf nameservers'
                sed -i "s/xxxxx/$(grep ^nameserver /etc/resolv.conf | sed 's/^nameserver//' | tr -d '\n')/" /tmp/nginx/default.conf
                cp /tmp/nginx/default.conf /etc/nginx/conf.d/default.conf
                service nginx stop
                sed -i '/default_server;/d' /etc/nginx/nginx.conf
                sleep 10
                service nginx restart
          services:
            sysvinit:
              nginx:
                enabled: true
                ensureRunning: true
                files:
                - /etc/nginx/conf.d/default.conf
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !Ref pWebServerAMI
      IamInstanceProfile: !Ref rWebInstanceProfile
      InstanceType: !Ref pWebInstanceType
      BlockDeviceMappings:
      - DeviceName: /dev/sdh
        Ebs:
          VolumeSize: 50
          VolumeType: gp2
          Encrypted: true
      KeyName: !Ref pEC2KeyPair
      SecurityGroups:
      - !Ref rSecurityGroupWebInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          
          # install SSL cert common key
          yum -y install mod_ssl

          aws configure set default.s3.signature_version s3v4
          aws s3 cp s3://${rS3AssetsBucket}/ssl/common.crt /etc/ssl/certs/common.crt --region ${AWS::Region}
          aws s3 cp s3://${rS3AssetsBucket}/ssl/common.key /etc/ssl/private/common.key --region ${AWS::Region}        
          
          EC2_INSTANCE_ID=$(curl -s http://instance-data/latest/meta-data/instance-id)

          ######################################################################
          # Volume /dev/sdh (which will get created as /dev/xvdh on Amazon Linux)

          DATA_STATE="unknown"
          until [ "${!DATA_STATE}" == "attached" ]; do
            DATA_STATE=$(aws ec2 describe-volumes \
            --region ${AWS::Region} \
            --filters \
                  Name=attachment.instance-id,Values=${!EC2_INSTANCE_ID} \
                  Name=attachment.device,Values=/dev/sdh \
            --query Volumes[].Attachments[].State \
            --output text)

            sleep 5
          done

          # Format /dev/xvdh if it does not contain a partition yet
          if [ "$(file -b -s /dev/xvdh)" == "data" ]; then
            mkfs -t ext4 /dev/xvdh
          fi

          mkdir -p /data
          mount /dev/xvdh /data

          # Persist the volume in /etc/fstab so it gets mounted again
          echo '/dev/xvdh /data ext4 defaults,nofail 0 2' >> /etc/fstab

          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rAutoScalingConfigWeb --region ${AWS::Region}

          ## Nginx setup
          sleep 5
          cp /tmp/nginx/default.conf /etc/nginx/conf.d/default.conf
          service nginx stop
          sed -i '/default_server;/d' /etc/nginx/nginx.conf
          sleep 10
          service nginx restart
  rAutoScalingGroupWeb:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: rAutoScalingConfigWeb
    Properties:
      AvailabilityZones:
      - !Ref AvailabilityZoneA
      - !Ref AvailabilityZoneB
      VPCZoneIdentifier:
      - !Ref pDMZSubnetA
      - !Ref pDMZSubnetB
      LaunchConfigurationName: !Ref rAutoScalingConfigWeb
      MinSize: "2"
      MaxSize: "4"
      LoadBalancerNames:
      - !Ref rELBWeb
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
      - Key: Name
        Value: Proxy Server
        PropagateAtLaunch: true
      - Key: Environment
        Value: !Ref pEnvironment
        PropagateAtLaunch: true
  rAutoScalingUpWeb:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupWeb
      Cooldown: "500"
      ScalingAdjustment: 1
  rAutoScalingDownWeb:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupWeb
      Cooldown: "500"
      ScalingAdjustment: -1
  rCWAlarmHighCPUWeb:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 50
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance
        is down
      Period: 60
      AlarmActions:
      - !Ref rAutoScalingUpWeb
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref rAutoScalingGroupWeb
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  rCWAlarmLowCPUWeb:
    Type: AWS::CloudWatch::Alarm
    DependsOn: rAutoScalingGroupWeb
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 10
      AlarmDescription: Alarm if CPU too low, remove a web server
      Period: 60
      AlarmActions:
      - !Ref rAutoScalingDownWeb
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref rAutoScalingGroupWeb
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
  rAppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: S3Assets
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: GetServerCertificate
            Effect: Allow
            Action:
            - s3:Get*
            - s3:List*
            - s3:Head*
            Resource:
            - !Sub arn:${AWS::Partition}:s3:::${rS3AssetsBucket}/*
            - !Sub arn:${AWS::Partition}:s3:::${rS3AssetsBucket}
            - !Sub
              - arn:${AWS::Partition}:s3:::${S3Bucket}
              - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
            - !Sub
              - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
              - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
          - Sid: DescribeVolumes
            Effect: Allow
            Action:
            - ec2:DescribeVolumes
            Resource: '*'
      - PolicyName: aws-quick-start-s3-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
              - s3:GetObject
            Resource:
              - !Sub
                - arn:${AWS::Partition}:s3:::${S3Bucket}
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              - !Sub
                - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
                - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
            Effect: Allow
  rAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: 'rAppInstanceRole'
  rAutoScalingConfigApp:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
    - rPreProcInstance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          wordpress_install:
          - install_cfn
          - install_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.rAutoScalingConfigApp.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rAutoScalingGroupApp --configsets wordpress_install --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          commands:
            0_enable_mariadb:
              command: amazon-linux-extras enable lamp-mariadb10.2-php7.2
            1_yum_clean:
              command: yum clean metadata
            2_php_install:
             command: yum install -y php-cli php-pdo php-fpm php-json php-mysqlnd mariadb
          sources:
            /var/www/html: https://wordpress.org/latest.tar.gz
          files:
            /tmp/httpd/ssl.conf:
              content: |
                Listen 443
                <VirtualHost *:443>
                DocumentRoot /var/www/html
                LoadModule ssl_module /etc/httpd/modules/mod_ssl.so
                SSLEngine on
                SSLCertificateFile /etc/ssl/certs/common.crt
                SSLCertificateKeyFile /etc/ssl/private/common.key
                </VirtualHost>
              mode: '000755'
              owner: root
              group: root
            /var/www/html/wordpress/wp-config.php:
              content: !Sub |
                <?php
                define('DB_NAME', '${pDBName}');
                define('DB_USER', '${pDBUser}');
                define('DB_PASSWORD', '${pDBPassword}');
                define('DB_HOST', '${pDBHost}');
                define('FORCE_SSL_ADMIN', true);
                if (strpos($_SERVER['HTTP_X_FORWARDED_PROTO'], 'https') !== false) { $_SERVER['HTTPS']='on'; }
                define('DB_CHARSET', 'utf8');
                define('DB_COLLATE', '');

                $table_prefix = 'wp_';
                define('WP_DEBUG', false);

                if ( !defined('ABSPATH') )
                  define('ABSPATH', dirname(__FILE__) . '/');

                require_once(ABSPATH . 'wp-settings.php');
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: !Ref pAppAmi
      IamInstanceProfile: !Ref rAppInstanceProfile
      InstanceType: !Ref pAppInstanceType
      BlockDeviceMappings:
      - DeviceName: /dev/sdh
        Ebs:
          VolumeSize: 50
          VolumeType: gp2
          Encrypted: true
      KeyName: !Ref pEC2KeyPair
      SecurityGroups:
      - !Ref rSecurityGroupAppInstance
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash -x

            yum update -y
            yum -y install mod_ssl

            aws configure set default.s3.signature_version s3v4
            aws s3 cp s3://${rS3AssetsBucket}/ssl/common.crt /etc/ssl/certs/common.crt --region ${AWS::Region}
            aws s3 cp s3://${rS3AssetsBucket}/ssl/common.key /etc/ssl/private/common.key --region ${AWS::Region}

            EC2_INSTANCE_ID=$(curl -s http://instance-data/latest/meta-data/instance-id)

            ######################################################################
            # Volume /dev/sdh (which will get created as /dev/xvdh on Amazon Linux)

            DATA_STATE="unknown"
            until [ "${!DATA_STATE}" == "attached" ]; do
              DATA_STATE=$(aws ec2 describe-volumes \
              --region ${AWS::Region} \
              --filters \
                    Name=attachment.instance-id,Values=${!EC2_INSTANCE_ID} \
                    Name=attachment.device,Values=/dev/sdh \
              --query Volumes[].Attachments[].State \
              --output text)

              sleep 5
            done

            # Format /dev/xvdh if it does not contain a partition yet
            if [ "$(file -b -s /dev/xvdh)" == "data" ]; then
              mkfs -t ext4 /dev/xvdh
            fi

            mkdir -p /data
            mount /dev/xvdh /data

            # Persist the volume in /etc/fstab so it gets mounted again
            echo '/dev/xvdh /data ext4 defaults,nofail 0 2' >> /etc/fstab

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rAutoScalingConfigApp --configsets wordpress_install --region ${AWS::Region}

            cp /tmp/httpd/ssl.conf /etc/httpd/conf.d/ssl.conf
            service httpd restart

            ######################################################################
            #     NOTE: UPDATE THESE VALUES ACCORDING TO THE COMPLIANCE BODY     #
            ######################################################################
            LANDING_PAGE="/var/www/html/landing.html"
            IMAGES-FLD="/var/www/html/images"
            COMPLIANCE_BODY_LABEL="NESA"
            COMPLIANCE_SURVEY_LINK="NESA"
            COMPLIANCE_MATRIX_FILENAME="NESA Baselined Controls Framework.xlsx"
            ######################################################################

            # Download the landing page.
            sudo aws s3 cp --region=${S3Region} s3://${S3Bucket}/${QSS3KeyPrefix}assets/landing/landing.html $LANDING_PAGE

            # Replace relative image links with links to the production S3 source.
            sudo aws s3 cp --region=${S3Region} s3://${S3Bucket}/${QSS3KeyPrefix}assets/landing/images/ /var/www/html/images/ --recursive
            #sudo /usr/bin/unzip /var/www/html/images.zip -d /var/www/html/
            #sudo sed -i 's|images|/var/www/html/images|g' $LANDING_PAGE

            # Inject the landing page branding label.
            sudo sed -i "s|{compliance-body}|$COMPLIANCE_BODY_LABEL|g" $LANDING_PAGE

            # Inject the survey link parameter.
            sudo sed -i "s|{compliance-body-survey-link}|$COMPLIANCE_SURVEY_LINK|g" $LANDING_PAGE

            # Inject the security control matrix file location.
            aws s3 cp --region=${S3Region} s3://${S3Bucket}/${QSS3KeyPrefix}assets/$COMPLIANCE_MATRIX_FILENAME /var/www/html/$COMPLIANCE_MATRIX_FILENAME
            sudo sed -i "s|{compliance-body-matrix}|$COMPLIANCE_MATRIX_FILENAME|g" $LANDING_PAGE

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource rAutoScalingGroupApp --region ${AWS::Region}
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
  rAutoScalingGroupApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: rAutoScalingConfigApp
    Properties:
      AvailabilityZones:
      - !Ref AvailabilityZoneA
      - !Ref AvailabilityZoneB
      VPCZoneIdentifier:
      - !Ref pAppPrivateSubnetA
      - !Ref pAppPrivateSubnetB
      LaunchConfigurationName: !Ref rAutoScalingConfigApp
      MinSize: "2"
      MaxSize: "4"
      LoadBalancerNames:
      - !Ref rELBApp
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
      - Key: Name
        Value: AppServer
        PropagateAtLaunch: true
      - Key: Environment
        Value: !Ref pEnvironment
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
  rAutoScalingDownApp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupApp
      Cooldown: "1"
      ScalingAdjustment: 1
  rAutoScalingUpApp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupApp
      Cooldown: "1"
      ScalingAdjustment: -1
  rCWAlarmHighCPUApp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 50
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance
        is down
      Period: 60
      AlarmActions:
      - !Ref rAutoScalingDownApp
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref rAutoScalingGroupApp
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  rCWAlarmLowCPUApp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 10
      AlarmDescription: Alarm if CPU too low, remove an app server
      Period: 60
      AlarmActions:
      - !Ref rAutoScalingUpApp
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref rAutoScalingGroupApp
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
  rPostProcInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: PostProcPermissions
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: UploadServerCertificate
            Effect: Allow
            Action:
            - iam:ListServerCertificates
            - iam:UploadServerCertificate
            Resource:
            - '*'
          - Sid: CreateLoadBalancerListener
            Effect: Allow
            Action:
            - elasticloadbalancing:CreateLoadBalancerListeners
            Resource:
            - '*'
          - Sid: SelfDestruct
            Effect: Allow
            Action:
            - ec2:TerminateInstances
            Resource:
            - '*'
  rPostProcInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref rPostProcInstanceRole
  rPostProcInstance:
    Type: AWS::EC2::Instance
    DependsOn:
    - rAutoScalingGroupApp
    - rAutoScalingGroupWeb
    Properties:
      ImageId: !Ref pWebServerAMI
      InstanceType: !Ref pAppInstanceType
      IamInstanceProfile: !Ref rPostProcInstanceProfile
      SubnetId: !Ref pAppPrivateSubnetA
      SecurityGroupIds:
      - !Ref rSecurityGroupAppInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          echo Configure the region, necessary especially for GovCloud
          aws configure set region ${AWS::Region}

          echo Sleeping for 2 minutes to allow CloudFormation to catch up
          sleep 120

          echo Self-destruct!
          aws ec2 terminate-instances --instance-id $(curl -s http://169.254.169.254/latest/meta-data/instance-id) --region ${AWS::Region}
      Tags:
      - Key: Name
        Value: PostProcessor
Outputs:
  LandingPageURL:
    Value: !Sub https://${rELBWeb.DNSName}/landing.html
    Description: Landing Page
  WebsiteURL:
    Value: !Sub https://${rELBWeb.DNSName}/wordpress/wp-admin/install.php
    Description: WordPress Website (demonstration purposes only)
  rSecurityGroupWeb:
    Value: !Ref rSecurityGroupWeb
  rSecurityGroupApp:
    Value: !Ref rSecurityGroupApp
  rSecurityGroupRDS:
    Value: !Ref rSecurityGroupRDS
  SurveyLink:
    Value: https://aws.au1.qualtrics.com/SE/?SID=SV_55sYYdtY1NhTTgN&qs=hipaa
    Description: Please take a moment to complete the survey by clicking this link
  Help:
    Description: For assistance or questions regarding this quickstart please email
      compliance-accelerator@amazon.com
    Value: ''
...
